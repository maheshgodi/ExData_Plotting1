x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
set.seed(1)
x <- rnorm(10)
y <- rnorm(10, mean = 0, sd = 1)
plot(x,y , type = 'o' , col = 'green' ,lwd = 4 , main = " Test ")
?rpois
rpois(10)
rpois(10, lambda = 1)
rpois(10, lambda = 1)
rpois(10, lambda = 1)
rpois(10, lambda = 1)
rpois(10, lambda = 1)
rpois(10, lambda = 2)
rpois(10, lambda = 2)
rpois(10, lambda = 2)
rpois(10, lambda = 20)
rpois(10, lambda = 20)
ppois(2,2)
ppois(2, lambda = 2)
ppois(2, lambda = 2)
ppois(2, lambda = 2)
ppois(2, lambda = 2)
set.seed(20)
x <- rnorm(100)
x
e <- rnorm(100, 0, 2)
e
y <- 0.5 + 2 * x + e
y
plot(x, y , type = 'o' , col = 'red' ,lwd = 5 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y , type = 'l' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y , type = '0' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
?rbinom
set.seed(20)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y ,  col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y ,  col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y ,  col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y ,  col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y ,  col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y ,  col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y , type = 'o' , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
plot(x, y  , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100,exp(log.mu))
plot(x, y  , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" )
log.mu
y
sample(1:10 , 4)
sample(1:10 , 4)
sample(letters,5)
sample(1,10)
sample(1:10)
sample(1:10)
sample(1:10 , replace = TRUE)
sample(1:10 , replace = TRUE)
sample(1:10 , replace = TRUE)
sample(1:10 , replace = TRUE)
sample(1:10 , replace = TRUE)
sample(1:10 , replace = TRUE)
system.time(sample(1:1000 , replace = TRUE))
system.time(plot(x, y  , col = 'red' ,lwd = 1 , main = "Generating Random Numbers From a Linear Model" ))
hilbert <-  function(n) {
i <- 1:n
1  / outer(i - 1 , i , "+")
}
x <- hilbert(1000)
x
system.time(svd(x))
?Rprof
Rprof(NULL)
system.time(svd(x))
Rprof(NULL)
Rprof(NULL)
system.time(svd(x))
Rprof(append = TRUE)
system.time(svd(x))
svd(x)
Rprof(append = TRUE)
svd(x)
Rprof()
svd(x)
Rprof()
Rprof(tmp <- tempfile())
example(glm)
Rprof()
summaryRprof(tmp)
unlink(tmp)
Rprof()
example(glm)
Rprof()
Rprof(tmp <- tempfile())
example(glm)
Rprof()
summaryRprof(tmp)
unlink(tmp)
Rprof(tmp <- tempfile())
svd(x)
Rprof()
summaryRprof(tmp)
unlink(tmp)
myapp <- oauth_app("github", "d7911c1ddf2347bcc723", "f715743d437d6a6447f73a8b1f9ad5e9b39955d8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
myapp <- oauth_app("github", "2775c043b0952416e5dd", "848cf1575b4284317e467f2792ad7e2794c078dd")
library(httr)
myapp <- oauth_app("github", "2775c043b0952416e5dd", "848cf1575b4284317e467f2792ad7e2794c078dd")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "2775c043b0952416e5dd", "848cf1575b4284317e467f2792ad7e2794c078dd")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
source("http://bioconductor.org/biocLite.R")
biocLite()
myapp <- oauth_app("github", "2775c043b0952416e5dd", "848cf1575b4284317e467f2792ad7e2794c078dd")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "2775c043b0952416e5dd")
library(httr)
myapp <- oauth_app("github", "2775c043b0952416e5dd", "848cf1575b4284317e467f2792ad7e2794c078dd")
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(data.table)
data <- fread("household_power_consumption.txt")
######### Clean data #########
class(data$Date)
class(data$Time)
# Data and time variables are characters
# Change the format of Date variable
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
class(data$Date)
# Subset the data for the two dates of interest
data_subset <- data[data$Date=="2007-02-01" | data$Date=="2007-02-02"]
# Convert data subset to a data frame
class(data_subset)
data_subset <- data.frame(data_subset)
# Convert columns to numeric
for(i in c(3:9)) {data_subset[,i] <- as.numeric(as.character(data_subset[,i]))}
# Create Date_Time variable
data_subset$Date_Time <- paste(data_subset$Date, data_subset$Time)
# Convert Date_Time variable to proper format
data_subset$Date_Time <- strptime(data_subset$Date_Time, format="%Y-%m-%d %H:%M:%S")
class(data_subset$Date_Time)
######### Plot 2 #########
head(data_subset)
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
par(mar = c(6, 6, 5, 4))
plot(data_subset$Date_Time, data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
dir <- "/Users/mgodi/Documents/Mahesh Godi/Me/Hadoop/Data Science/JOHNS HOPKINS - DS/Exploratory Data Analysis/Assignment/ExData_Plotting1"
setwd("dir")
dir <- "/Users/mgodi/Documents/Mahesh Godi/Me/Hadoop/Data Science/JOHNS HOPKINS - DS/Exploratory Data Analysis/Assignment/ExData_Plotting1"
setwd("dir")
setwd(dir)
getwd(dir)
getwd()
library(data.table)
data <- fread("household_power_consumption.txt")
class(data$Date)
class(data$Time)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
class(data$Date)
data_subset <- data[data$Date=="2007-02-01" | data$Date=="2007-02-02"]
class(data_subset)
data_subset <- data.frame(data_subset)
for(i in c(3:9)) {data_subset[,i] <- as.numeric(as.character(data_subset[,i]))}
data_subset$Date_Time <- paste(data_subset$Date, data_subset$Time)
data_subset$Date_Time <- strptime(data_subset$Date_Time, format="%Y-%m-%d %H:%M:%S")
class(data_subset$Date_Time)
head(data_subset)
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
par(mar = c(6, 6, 5, 4))
plot(data_subset$Date_Time, data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
lines(data_subset$Date_Time, data_subset$Global_active_power, type="S")
rm(Electric_power)
rm (Electric_power_data )
Electric_power <- read.table("household_power_consumption.txt",   stringsAsFactors = FALSE,
header = TRUE, comment.char="", quote='\"',
sep = ';', na.strings = "?", check.names = FALSE)
## Subseting only "2007-02-01" and "2007-02-02"
Electric_power_data <- subset(Electric_power, subset = (as.Date(Electric_power$Date , "%m/%d/%Y") >= "2007-02-01" & (as.Date(Electric_power$Date , "%m/%d/%Y") <= "2007-02-02") ))
## Creating Date_Time data
## Date_Time <- paste(as.Date(Electric_power_data$Date), Electric_power_data$Time)
## Assinging Date_Time data as a new column in Electric_power_data
Electric_power_data$Datetime <- strptime(paste(Electric_power_data$Date, Electric_power_data$Time), "%d/%m/%Y %H:%M:%S")
head(Electric_power_data)
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
dev.off()
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
svg()
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
dev.list()
dev.list()
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
dev.list()
dev.cur()
dev.new()
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
plot(Electric_power_data$Datetime, Electric_power_data$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
plot(Electric_power_data$Datetime, Electric_power_data$Global_active_power  , type="l", xlab="", ylab="Global Active Power (kilowatts)")
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
par(mar = c(6, 6, 5, 4))
plot(data_subset$Date_Time, data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
plot(data_subset$Date_Time, data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
plot(data_subset$Date_Time, data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
dev.new()
plot(data_subset$Date_Time, data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
lines(data_subset$Date_Time, data_subset$Global_active_power, type="S")
plot(Electric_power_data$Datetime, Electric_power_data$Global_active_power  , type="l", xlab="", ylab="Global Active Power (kilowatts)")
lines(data_subset$Date_Time, data_subset$Global_active_power, type="S")
plot(data_subset$Date_Time, data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
lines(data_subset$Date_Time, data_subset$Global_active_power, type="S")
## Reading data
rm(Electric_power)
rm (Electric_power_data )
Electric_power <- read.table("household_power_consumption.txt",   stringsAsFactors = FALSE,
header = TRUE, comment.char="", quote='\"',
sep = ';', na.strings = "?", check.names = FALSE)
## Subseting only "2007-02-01" and "2007-02-02"
Electric_power_data <- subset(Electric_power, subset = (as.Date(Electric_power$Date , "%m/%d/%Y") >= "2007-02-01" & (as.Date(Electric_power$Date , "%m/%d/%Y") <= "2007-02-02") ))
## Creating Date_Time data
## Date_Time <- paste(as.Date(Electric_power_data$Date), Electric_power_data$Time)
## Assinging Date_Time data as a new column in Electric_power_data
Electric_power_data$Datetime <- strptime(paste(Electric_power_data$Date, Electric_power_data$Time), "%d/%m/%Y %H:%M:%S")
head(Electric_power_data)
for(i in c(3:9)) {Electric_power_data[,i] <- as.numeric(as.character(Electric_power_data[,i]))}
plot(Electric_power_data$Datetime, Electric_power_data$Global_active_power  , type="l", xlab="", ylab="Global Active Power (kilowatts)")
plot(Electric_power_data$Datetime, Electric_power_data$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
lines(Electric_power_data$Datetime, Electric_power_data$Global_active_power, type="S")
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
par(mar = c(6, 6, 5, 4))
plot(Electric_power_data$Datetime, Electric_power_data$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
lines(Electric_power_data$Datetime, Electric_power_data$Global_active_power, type="S")
dev.new()
dev.new()
dev.new()
dev.cur()
library(data.table)
Electric_power_data <- fread("household_power_consumption.txt")
## Data Clean
# Change the format of Date variable
Electric_power_data$Date <- as.Date(Electric_power_data$Date, format="%d/%m/%Y")
# Subset the data  for "2007-02-01" and "2007-02-02"
Electric_power_data_subset <- Electric_power_data[Electric_power_data$Date=="2007-02-01" | Electric_power_data$Date=="2007-02-02"]
# Convert data subset to a data frame
Electric_power_data_subset <- data.frame(Electric_power_data_subset)
# Convert columns to numeric
for(i in c(3:9)) {Electric_power_data_subset[,i] <- as.numeric(as.character(Electric_power_data_subset[,i]))}
# Create Date_Time variable
Electric_power_data_subset$Date_Time <- paste(Electric_power_data_subset$Date, Electric_power_data_subset$Time)
# Convert Date_Time variable to proper format
Electric_power_data_subset$Date_Time <- strptime(Electric_power_data_subset$Date_Time, format="%Y-%m-%d %H:%M:%S")
## Plot2
head(Electric_power_data_subset)
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
par(mar = c(6, 6, 5, 4))
plot(Electric_power_data_subset$Date_Time, Electric_power_data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
lines(Electric_power_data_subset$Date_Time, Electric_power_data_subset$Global_active_power, type="S")
dev.off()
dev.new()
library(data.table)
Electric_power_data <- fread("household_power_consumption.txt")
## Data Clean
# Change the format of Date variable
Electric_power_data$Date <- as.Date(Electric_power_data$Date, format="%d/%m/%Y")
# Subset the data  for "2007-02-01" and "2007-02-02"
Electric_power_data_subset <- Electric_power_data[Electric_power_data$Date=="2007-02-01" | Electric_power_data$Date=="2007-02-02"]
# Convert data subset to a data frame
Electric_power_data_subset <- data.frame(Electric_power_data_subset)
# Convert columns to numeric
for(i in c(3:9)) {Electric_power_data_subset[,i] <- as.numeric(as.character(Electric_power_data_subset[,i]))}
# Create Date_Time variable
Electric_power_data_subset$Date_Time <- paste(Electric_power_data_subset$Date, Electric_power_data_subset$Time)
# Convert Date_Time variable to proper format
Electric_power_data_subset$Date_Time <- strptime(Electric_power_data_subset$Date_Time, format="%Y-%m-%d %H:%M:%S")
plot(Electric_power_data_subset$Date_Time, Electric_power_data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
lines(Electric_power_data_subset$Date_Time, Electric_power_data_subset$Global_active_power, type="S")
dev.new()
dev.cur()
dev.new()
dev.new()
library(data.table)
Electric_power_data <- fread("household_power_consumption.txt")
## Data Clean
# Change the format of Date variable
Electric_power_data$Date <- as.Date(Electric_power_data$Date, format="%d/%m/%Y")
# Subset the data  for "2007-02-01" and "2007-02-02"
Electric_power_data_subset <- Electric_power_data[Electric_power_data$Date=="2007-02-01" | Electric_power_data$Date=="2007-02-02"]
# Convert data subset to a data frame
Electric_power_data_subset <- data.frame(Electric_power_data_subset)
# Convert columns to numeric
for(i in c(3:9)) {Electric_power_data_subset[,i] <- as.numeric(as.character(Electric_power_data_subset[,i]))}
# Create Date_Time variable
Electric_power_data_subset$Date_Time <- paste(Electric_power_data_subset$Date, Electric_power_data_subset$Time)
# Convert Date_Time variable to proper format
Electric_power_data_subset$Date_Time <- strptime(Electric_power_data_subset$Date_Time, format="%Y-%m-%d %H:%M:%S")
## Plot2
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
par(mar = c(6, 6, 5, 4))
plot(Electric_power_data_subset$Date_Time, Electric_power_data_subset$Global_active_power, xaxt=NULL, xlab = "", ylab = "Global Active Power (kilowatts)", type="n")
lines(Electric_power_data_subset$Date_Time, Electric_power_data_subset$Global_active_power, type="S")
dev.off()
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
dev.new()
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
dev.cur()
dev.new()
dev.cur()
dev.new()
dev.list()
dev.cur()
dev.new()
png("plot50.png")
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
dev.new()
dev.new()
dev.cur()
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
hist(Electric_power_data$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "Red",
main = "Global Active Power"  ,
ylim = c(0,1200),
xlim = c(0,6),
xaxp = c(0, 6, 3),
breaks = 13)
for(i in c(3:9)) {Electric_power_data[,i] <- as.numeric(as.character(Electric_power_data[,i]))}
